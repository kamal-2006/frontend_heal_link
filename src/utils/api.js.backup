/**
 * API client utility for making consistent fetch requests
 */

// Get the API base URL from environment variables or use default
const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:5000";

/**
 * Makes a fetch request to the API
 *
 * @param {string} endpoint - The API endpoint (without the base URL)
 * @param {Object} options - Fetch options
 * @returns {Promise<Object>} - The JSON response
 */
export async function fetchAPI(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;

  // Set default headers
  const headers = {
    "Content-Type": "application/json",
    ...options.headers,
  };

  // Add authorization token if available
  if (typeof window !== "undefined") {
    const token = localStorage.getItem("token");
    if (token && !headers.Authorization) {
      headers.Authorization = `Bearer ${token}`;
    }
  }

  try {
    console.log(`Fetching from: ${url}`);
    const response = await fetch(url, {
      ...options,
      headers,
    });

    // For non-JSON responses
    if (!response.headers.get("content-type")?.includes("application/json")) {
      if (!response.ok)
        throw new Error(`API Error: ${response.status} ${response.statusText}`);
      return await response.text();
    }

    // For JSON responses
    const data = await response.json();

    if (!response.ok) {
      throw new Error(
        data.error ||
          `API Error: ${response.status} ${data.message || response.statusText}`
      );
    }

    return data;
  } catch (error) {
    console.error(`API request failed: ${error.message}`);
    throw error;
  }
}

/**
 * Shorthand for GET requests
 */
export const get = (endpoint) => fetchAPI(endpoint);

/**
 * Shorthand for POST requests
 */
export const post = (endpoint, data) =>
  fetchAPI(endpoint, {
    method: "POST",
    body: JSON.stringify(data),
  });

/**
 * Shorthand for PUT requests
 */
export const put = (endpoint, data) =>
  fetchAPI(endpoint, {
    method: "PUT",
    body: JSON.stringify(data),
  });

/**
 * Shorthand for DELETE requests
 */
export const del = (endpoint) =>
  fetchAPI(endpoint, {
    method: "DELETE",
  });
